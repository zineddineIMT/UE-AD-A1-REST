---
openapi: 3.1.0

info:
  title: Movie API
  summary: Movie Service API
  description: >
    The Movie API provides comprehensive management of a movie database. It offers functionalities for retrieving, adding, updating, and deleting movie entries. This API is designed to be intuitive and user-friendly, catering to the needs of movie enthusiasts and developers alike.
  contact:
    email: zineddine.chalekh@imt-atlantique.net, matthis.bleuet@imt-atlantique.net
  license:
    name: GNU General Public License v3 (GPL-3)
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0

tags:
- name: admins
  description: Secured admin-only calls
- name: developers
  description: Operations available to regular developers

paths:
  /:

    get:
      summary: Home Page
      description: Returns a welcome message for the Movie service.
      responses:
        '200':
          description: Successful response with a welcome message.
          content:
            text/html:
              schema:
                type: string
                example: "<h1 style='color:blue'>Welcome to the Movie service!</h1>"

  /movies:

    get:
      summary: Get All Movies
      description: Returns a list of all movies in the service.
      responses:
        '200':
          description: Successful response with a list of movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieList'

  /movies/{movieid}:

    get:
      summary: Get Movie by ID
      description: Retrieves details of a specific movie by its unique ID.
      parameters:
        - in: path
          name: movieid
          required: true
          schema:
            type: string
          description: Unique ID of the movie to retrieve.
      responses:
        '200':
          description: Successful response with the details of the movie.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found for the provided ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie ID not found"

    post:
      summary: Add a New Movie
      description: Adds a new movie to the service. Returns an error if the movie ID already exists.
      parameters:
        - in: path
          name: movieid
          required: true
          schema:
            type: string
          description: The ID for the new movie to add.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: Movie successfully added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie added"
        '409':
          description: Conflict, movie ID already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie ID already exists"

    delete:
      summary: Delete a Movie
      description: Deletes a movie from the service by its ID. Returns an error if the movie ID is not found.
      parameters:
        - in: path
          name: movieid
          required: true
          schema:
            type: string
          description: The ID of the movie to be deleted.
      responses:
        '200':
          description: Movie successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie ID not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie ID not found"


  /movies/director/{director}:

    get:
      summary: Get Movies by Director
      description: Retrieves a list of movies directed by the specified director.
      parameters:
        - in: path
          name: director
          required: true
          schema:
            type: string
          description: The name of the director to filter movies by.
      responses:
        '200':
          description: Successful response with a list of movies directed by the specified director.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '404':
          description: No movies found for the specified director.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No movies found for this director"

  /moviesbytitle:

    get:
      summary: Get Movie by Title
      description: Retrieves details of a movie by its title. Returns an error message if the title is not found.
      parameters:
        - in: query
          name: title
          required: true
          schema:
            type: string
          description: The title of the movie to retrieve.
      responses:
        '200':
          description: Successful response with the details of the movie.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found for the provided title.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie title not found"

  /movies/{movieid}/{rate}:

    put:
      summary: Update Movie Rating
      description: Updates the rating of a specific movie by its ID. Returns an error if the movie ID is not found.
      parameters:
        - in: path
          name: movieid
          required: true
          schema:
            type: string
          description: The ID of the movie to update.
        - in: path
          name: rate
          required: true
          schema:
            type: number
            format: float
            description: The new rating value for the movie.
      responses:
        '200':
          description: Movie rating updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie ID not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie ID not found"


components:
  schemas:

    Movie:
      type: object
      required:
        - title
        - rating
        - director
        - id
      properties:
        title:
          type: string
          example: The Good Dinosaur
        rating:
          type: number
          format: float
          example: 7.4
        director:
          type: string
          example: Peter Sohn
        id:
          type: string
          format: uuid
          example: 720d006c-3a57-4b6a-b18f-9b713b073f3c

    MovieList:
      type: object
      properties:
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'





